//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace GeHosWebApi.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities()
            : base("name=Entities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Administrador> Administrador { get; set; }
        public virtual DbSet<Agenda> Agenda { get; set; }
        public virtual DbSet<AgendaHorario> AgendaHorario { get; set; }
        public virtual DbSet<AgendaTipo> AgendaTipo { get; set; }
        public virtual DbSet<AgrupamientoGradosDeEscalafon> AgrupamientoGradosDeEscalafon { get; set; }
        public virtual DbSet<AspNetRoles> AspNetRoles { get; set; }
        public virtual DbSet<AspNetUserClaims> AspNetUserClaims { get; set; }
        public virtual DbSet<AspNetUserLogins> AspNetUserLogins { get; set; }
        public virtual DbSet<AspNetUserRoles> AspNetUserRoles { get; set; }
        public virtual DbSet<AspNetUsers> AspNetUsers { get; set; }
        public virtual DbSet<Barrio> Barrio { get; set; }
        public virtual DbSet<CentroDeSalud> CentroDeSalud { get; set; }
        public virtual DbSet<CentroDeSaludConsultorio> CentroDeSaludConsultorio { get; set; }
        public virtual DbSet<CentroDeSaludEspecialidad> CentroDeSaludEspecialidad { get; set; }
        public virtual DbSet<CuentaContable> CuentaContable { get; set; }
        public virtual DbSet<CuentaEscritural> CuentaEscritural { get; set; }
        public virtual DbSet<Decreto> Decreto { get; set; }
        public virtual DbSet<Departamento> Departamento { get; set; }
        public virtual DbSet<Diagnostico> Diagnostico { get; set; }
        public virtual DbSet<DiagnosticoAgrupamiento> DiagnosticoAgrupamiento { get; set; }
        public virtual DbSet<DiagnosticoCapitulo> DiagnosticoCapitulo { get; set; }
        public virtual DbSet<DiagnosticoPadron> DiagnosticoPadron { get; set; }
        public virtual DbSet<DiagnosticoSubCapitulo> DiagnosticoSubCapitulo { get; set; }
        public virtual DbSet<Empleado> Empleado { get; set; }
        public virtual DbSet<EmpleadoCentroDeSalud> EmpleadoCentroDeSalud { get; set; }
        public virtual DbSet<EmpleadoContratado> EmpleadoContratado { get; set; }
        public virtual DbSet<EmpleadoEspecialidad> EmpleadoEspecialidad { get; set; }
        public virtual DbSet<EmpleadoPlantaPermanente> EmpleadoPlantaPermanente { get; set; }
        public virtual DbSet<Especialidad> Especialidad { get; set; }
        public virtual DbSet<EstadoCivil> EstadoCivil { get; set; }
        public virtual DbSet<Etnia> Etnia { get; set; }
        public virtual DbSet<Evolucion> Evolucion { get; set; }
        public virtual DbSet<Fuente> Fuente { get; set; }
        public virtual DbSet<Grados> Grados { get; set; }
        public virtual DbSet<GradosCategoria> GradosCategoria { get; set; }
        public virtual DbSet<GradosDesignacion> GradosDesignacion { get; set; }
        public virtual DbSet<GrupoSanguineo> GrupoSanguineo { get; set; }
        public virtual DbSet<InstitucionContable> InstitucionContable { get; set; }
        public virtual DbSet<Localidad> Localidad { get; set; }
        public virtual DbSet<Menu> Menu { get; set; }
        public virtual DbSet<Nomenclador> Nomenclador { get; set; }
        public virtual DbSet<ObraSocial> ObraSocial { get; set; }
        public virtual DbSet<Oficina> Oficina { get; set; }
        public virtual DbSet<Paciente> Paciente { get; set; }
        public virtual DbSet<Pais> Pais { get; set; }
        public virtual DbSet<Persona> Persona { get; set; }
        public virtual DbSet<Practica> Practica { get; set; }
        public virtual DbSet<Profesion> Profesion { get; set; }
        public virtual DbSet<Provincia> Provincia { get; set; }
        public virtual DbSet<PuebloIndigena> PuebloIndigena { get; set; }
        public virtual DbSet<Reparticion> Reparticion { get; set; }
        public virtual DbSet<Resolucion> Resolucion { get; set; }
        public virtual DbSet<Sector> Sector { get; set; }
        public virtual DbSet<Sexo> Sexo { get; set; }
        public virtual DbSet<sysdiagrams> sysdiagrams { get; set; }
        public virtual DbSet<TipoAgendaDeProfesionales> TipoAgendaDeProfesionales { get; set; }
        public virtual DbSet<TipoDNI> TipoDNI { get; set; }
        public virtual DbSet<TipoEstadoEmpleadoPlantaPermanente> TipoEstadoEmpleadoPlantaPermanente { get; set; }
        public virtual DbSet<TipoGradosDesignacion> TipoGradosDesignacion { get; set; }
        public virtual DbSet<TipoLlamadoProximoTurno> TipoLlamadoProximoTurno { get; set; }
        public virtual DbSet<TipoNormaLegal> TipoNormaLegal { get; set; }
        public virtual DbSet<TipoParentesco> TipoParentesco { get; set; }
        public virtual DbSet<Turno> Turno { get; set; }
        public virtual DbSet<TurnoEstado> TurnoEstado { get; set; }
        public virtual DbSet<TurnoEstadoAdmision> TurnoEstadoAdmision { get; set; }
        public virtual DbSet<Zona> Zona { get; set; }
        public virtual DbSet<DiagnosticoPorTurno> DiagnosticoPorTurno { get; set; }
        public virtual DbSet<PracticaPorTurno> PracticaPorTurno { get; set; }
    
        public virtual int GetAgendaHorariosPorEspecialista(Nullable<int> empleadoID)
        {
            var empleadoIDParameter = empleadoID.HasValue ?
                new ObjectParameter("EmpleadoID", empleadoID) :
                new ObjectParameter("EmpleadoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAgendaHorariosPorEspecialista", empleadoIDParameter);
        }
    
        public virtual int GetAgendaPorEspecialista(Nullable<int> empleadoID)
        {
            var empleadoIDParameter = empleadoID.HasValue ?
                new ObjectParameter("EmpleadoID", empleadoID) :
                new ObjectParameter("EmpleadoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetAgendaPorEspecialista", empleadoIDParameter);
        }
    
        public virtual int GetCentrosDeSaludPorEmpleado(Nullable<int> empleadoID)
        {
            var empleadoIDParameter = empleadoID.HasValue ?
                new ObjectParameter("EmpleadoID", empleadoID) :
                new ObjectParameter("EmpleadoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetCentrosDeSaludPorEmpleado", empleadoIDParameter);
        }
    
        public virtual ObjectResult<GetDepartamentosPorProvincia_Result> GetDepartamentosPorProvincia(Nullable<int> provinciaID)
        {
            var provinciaIDParameter = provinciaID.HasValue ?
                new ObjectParameter("ProvinciaID", provinciaID) :
                new ObjectParameter("ProvinciaID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDepartamentosPorProvincia_Result>("GetDepartamentosPorProvincia", provinciaIDParameter);
        }
    
        public virtual ObjectResult<GetDiagnosticosPorAgrupamiento_Result> GetDiagnosticosPorAgrupamiento(Nullable<byte> diagnosticoAgrupamientoID)
        {
            var diagnosticoAgrupamientoIDParameter = diagnosticoAgrupamientoID.HasValue ?
                new ObjectParameter("DiagnosticoAgrupamientoID", diagnosticoAgrupamientoID) :
                new ObjectParameter("DiagnosticoAgrupamientoID", typeof(byte));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetDiagnosticosPorAgrupamiento_Result>("GetDiagnosticosPorAgrupamiento", diagnosticoAgrupamientoIDParameter);
        }
    
        public virtual ObjectResult<GetEspecialidadesPorCentroDeSalud_Result> GetEspecialidadesPorCentroDeSalud(Nullable<int> centroDeSaludID)
        {
            var centroDeSaludIDParameter = centroDeSaludID.HasValue ?
                new ObjectParameter("CentroDeSaludID", centroDeSaludID) :
                new ObjectParameter("CentroDeSaludID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEspecialidadesPorCentroDeSalud_Result>("GetEspecialidadesPorCentroDeSalud", centroDeSaludIDParameter);
        }
    
        public virtual int GetEspecialistasPorCentroDeSalud(Nullable<int> centroDeSaludID)
        {
            var centroDeSaludIDParameter = centroDeSaludID.HasValue ?
                new ObjectParameter("CentroDeSaludID", centroDeSaludID) :
                new ObjectParameter("CentroDeSaludID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("GetEspecialistasPorCentroDeSalud", centroDeSaludIDParameter);
        }
    
        public virtual ObjectResult<GetEvolucionPorPaciente_Result> GetEvolucionPorPaciente(Nullable<int> pacienteID)
        {
            var pacienteIDParameter = pacienteID.HasValue ?
                new ObjectParameter("PacienteID", pacienteID) :
                new ObjectParameter("PacienteID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEvolucionPorPaciente_Result>("GetEvolucionPorPaciente", pacienteIDParameter);
        }
    
        public virtual ObjectResult<GetEvolucionPorTurno_Result> GetEvolucionPorTurno(Nullable<long> turnoID)
        {
            var turnoIDParameter = turnoID.HasValue ?
                new ObjectParameter("TurnoID", turnoID) :
                new ObjectParameter("TurnoID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEvolucionPorTurno_Result>("GetEvolucionPorTurno", turnoIDParameter);
        }
    
        public virtual ObjectResult<GetListaDiagnosticoAgrupamiento_Result> GetListaDiagnosticoAgrupamiento()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaDiagnosticoAgrupamiento_Result>("GetListaDiagnosticoAgrupamiento");
        }
    
        public virtual ObjectResult<GetListaSexo_Result> GetListaSexo()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaSexo_Result>("GetListaSexo");
        }
    
        public virtual ObjectResult<GetListaTipoAgendaDeProfesionales_Result> GetListaTipoAgendaDeProfesionales()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTipoAgendaDeProfesionales_Result>("GetListaTipoAgendaDeProfesionales");
        }
    
        public virtual ObjectResult<GetListaTipoDNI_Result> GetListaTipoDNI()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTipoDNI_Result>("GetListaTipoDNI");
        }
    
        public virtual ObjectResult<GetListaTipoEstadoCivil_Result> GetListaTipoEstadoCivil()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTipoEstadoCivil_Result>("GetListaTipoEstadoCivil");
        }
    
        public virtual ObjectResult<GetListaTipoEstadoEmpleadoPlantaPermanente_Result> GetListaTipoEstadoEmpleadoPlantaPermanente()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTipoEstadoEmpleadoPlantaPermanente_Result>("GetListaTipoEstadoEmpleadoPlantaPermanente");
        }
    
        public virtual ObjectResult<GetListaTipoLlamadoProximoTurno_Result> GetListaTipoLlamadoProximoTurno()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTipoLlamadoProximoTurno_Result>("GetListaTipoLlamadoProximoTurno");
        }
    
        public virtual ObjectResult<GetListaTipoNormaLegal_Result> GetListaTipoNormaLegal()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTipoNormaLegal_Result>("GetListaTipoNormaLegal");
        }
    
        public virtual ObjectResult<GetListaTipoParentesco_Result> GetListaTipoParentesco()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTipoParentesco_Result>("GetListaTipoParentesco");
        }
    
        public virtual ObjectResult<GetListaTurnoEstado_Result> GetListaTurnoEstado()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTurnoEstado_Result>("GetListaTurnoEstado");
        }
    
        public virtual ObjectResult<GetListaTurnoEstadoAdmision_Result> GetListaTurnoEstadoAdmision()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetListaTurnoEstadoAdmision_Result>("GetListaTurnoEstadoAdmision");
        }
    
        public virtual ObjectResult<GetLocalidadesPorDepartamento_Result> GetLocalidadesPorDepartamento(Nullable<int> departamentoID)
        {
            var departamentoIDParameter = departamentoID.HasValue ?
                new ObjectParameter("DepartamentoID", departamentoID) :
                new ObjectParameter("DepartamentoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetLocalidadesPorDepartamento_Result>("GetLocalidadesPorDepartamento", departamentoIDParameter);
        }
    
        public virtual ObjectResult<GetPaises_Result> GetPaises()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPaises_Result>("GetPaises");
        }
    
        public virtual ObjectResult<GetPracticasPorNomenclador_Result> GetPracticasPorNomenclador(Nullable<int> nomencladorID)
        {
            var nomencladorIDParameter = nomencladorID.HasValue ?
                new ObjectParameter("NomencladorID", nomencladorID) :
                new ObjectParameter("NomencladorID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetPracticasPorNomenclador_Result>("GetPracticasPorNomenclador", nomencladorIDParameter);
        }
    
        public virtual ObjectResult<GetProvinciasPorPais_Result> GetProvinciasPorPais(Nullable<int> paisID)
        {
            var paisIDParameter = paisID.HasValue ?
                new ObjectParameter("PaisID", paisID) :
                new ObjectParameter("PaisID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetProvinciasPorPais_Result>("GetProvinciasPorPais", paisIDParameter);
        }
    
        public virtual ObjectResult<GetTurnosPorPaciente_Result> GetTurnosPorPaciente(Nullable<int> pacienteID, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var pacienteIDParameter = pacienteID.HasValue ?
                new ObjectParameter("PacienteID", pacienteID) :
                new ObjectParameter("PacienteID", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTurnosPorPaciente_Result>("GetTurnosPorPaciente", pacienteIDParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<GetEspecialidadesPorEspecialista_Result> GetEspecialidadesPorEspecialista(Nullable<int> empleadoID)
        {
            var empleadoIDParameter = empleadoID.HasValue ?
                new ObjectParameter("EmpleadoID", empleadoID) :
                new ObjectParameter("EmpleadoID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEspecialidadesPorEspecialista_Result>("GetEspecialidadesPorEspecialista", empleadoIDParameter);
        }
    
        public virtual ObjectResult<GetEspecialistasPorEspecialidad_Result> GetEspecialistasPorEspecialidad(Nullable<int> especialidadID)
        {
            var especialidadIDParameter = especialidadID.HasValue ?
                new ObjectParameter("EspecialidadID", especialidadID) :
                new ObjectParameter("EspecialidadID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEspecialistasPorEspecialidad_Result>("GetEspecialistasPorEspecialidad", especialidadIDParameter);
        }
    
        public virtual ObjectResult<GetEspecialistasPorEspecialidadPorCentroDeSalud_Result> GetEspecialistasPorEspecialidadPorCentroDeSalud(Nullable<int> especialidadID, Nullable<int> centroDeSalud)
        {
            var especialidadIDParameter = especialidadID.HasValue ?
                new ObjectParameter("EspecialidadID", especialidadID) :
                new ObjectParameter("EspecialidadID", typeof(int));
    
            var centroDeSaludParameter = centroDeSalud.HasValue ?
                new ObjectParameter("CentroDeSalud", centroDeSalud) :
                new ObjectParameter("CentroDeSalud", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEspecialistasPorEspecialidadPorCentroDeSalud_Result>("GetEspecialistasPorEspecialidadPorCentroDeSalud", especialidadIDParameter, centroDeSaludParameter);
        }
    
        public virtual ObjectResult<GetTurnosPorEspecialista_Result> GetTurnosPorEspecialista(Nullable<int> empleadoID, Nullable<System.DateTime> fechaDesde, Nullable<System.DateTime> fechaHasta)
        {
            var empleadoIDParameter = empleadoID.HasValue ?
                new ObjectParameter("EmpleadoID", empleadoID) :
                new ObjectParameter("EmpleadoID", typeof(int));
    
            var fechaDesdeParameter = fechaDesde.HasValue ?
                new ObjectParameter("FechaDesde", fechaDesde) :
                new ObjectParameter("FechaDesde", typeof(System.DateTime));
    
            var fechaHastaParameter = fechaHasta.HasValue ?
                new ObjectParameter("FechaHasta", fechaHasta) :
                new ObjectParameter("FechaHasta", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetTurnosPorEspecialista_Result>("GetTurnosPorEspecialista", empleadoIDParameter, fechaDesdeParameter, fechaHastaParameter);
        }
    
        public virtual ObjectResult<GetEspecialidadesPorEspecialistaPorCentroDeSalud_Result> GetEspecialidadesPorEspecialistaPorCentroDeSalud(Nullable<int> empleadoID, Nullable<int> centroDeSaludID)
        {
            var empleadoIDParameter = empleadoID.HasValue ?
                new ObjectParameter("EmpleadoID", empleadoID) :
                new ObjectParameter("EmpleadoID", typeof(int));
    
            var centroDeSaludIDParameter = centroDeSaludID.HasValue ?
                new ObjectParameter("CentroDeSaludID", centroDeSaludID) :
                new ObjectParameter("CentroDeSaludID", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<GetEspecialidadesPorEspecialistaPorCentroDeSalud_Result>("GetEspecialidadesPorEspecialistaPorCentroDeSalud", empleadoIDParameter, centroDeSaludIDParameter);
        }
    }
}
